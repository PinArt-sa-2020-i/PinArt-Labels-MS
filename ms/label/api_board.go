/*
 * PinArt Labels MS
 *
 * A labels microservice for PinArt system.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package label

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"

	_ "github.com/go-sql-driver/mysql"
)

func DeleteBoardLabel(w http.ResponseWriter, r *http.Request) {
	// db := dbConn()
	// idBoard, val := getCode(r, 0)
	// fmt.Println(val)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusAccepted)
}

func AddBoardLabel(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	var board Board
	// get the id
	idBoard, val := getCode(r, 0)
	fmt.Println(val)
	board.Id = int64(idBoard)
	exist := boardExist(board.Id)
	if !exist {
		createBoard(board.Id)
	}
	// get the body
	body, err := ioutil.ReadAll(r.Body)
	defer r.Body.Close()
	if err != nil {
		log.Printf("Error reading body: %v", err)
		http.Error(w, "can't read body", http.StatusBadRequest)
		return
	}
	fmt.Printf("%s", body)
	var labels LabelsInput
	err = json.Unmarshal(body, &labels)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	// insert and get labels
	linkBoard(board.Id, labels.RelatedLabels, db, w)
	// return struct board
	board.RelatedLabels = getLabels(labels.RelatedLabels, db, w)
	js, err := json.Marshal(board)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusAccepted)
	w.Write(js)
}

func GetLabelBoard(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	code, val := getCode(r, 0)
	fmt.Println(val)
	var id Id
	id.Id = int64(code)
	var board Board
	board.Id = id.Id
	// check if board exist
	exist := boardExist(board.Id)
	if !exist {
		createBoard(board.Id)
	}
	board.RelatedLabels = getBoardRelatedLabels(id.Id, db, w, r)
	js, err := json.Marshal(board)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(js)
}

func getCode(r *http.Request, defaultCode int) (int, string) {
	p := strings.Split(r.URL.Path, "/")
	if len(p) == 1 {
		return defaultCode, p[0]
	} else if len(p) > 3 {
		code, err := strconv.Atoi(p[3])
		if err == nil {
			return code, p[3]
		} else {
			return defaultCode, p[3]
		}
	} else {
		return defaultCode, ""
	}
}

func getCodeLabel(r *http.Request, defaultCode int) (int, string) {
	p := strings.Split(r.URL.Path, "/")
	if len(p) == 1 {
		return defaultCode, p[0]
	} else if len(p) > 2 {
		code, err := strconv.Atoi(p[2])
		if err == nil {
			return code, p[2]
		} else {
			return defaultCode, p[2]
		}
	} else {
		return defaultCode, ""
	}
}
